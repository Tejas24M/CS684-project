(* Constants are declared here *)
const turn_speed_left: int = 75 (* Speed for turning left *)
const turn_speed_right: int = 75 (* Speed for turning right *)
const proportional_gain: int = 1 (* Proportional gain for PID control *)
const integral_gain: int = 99 (* Integral gain for PID control *)
const derivative_gain: int = 9999 (* Derivative gain for PID control *)

(* Node for obstacle avoidance using IR sensors and a center sensor *)
node obstacle_avoid(forward_left_ir, forward_right_ir, center_sensor_input: int) returns (v_l, v_r, dir: int)
  var last avoidance_state_timer: int; (* Timer for each state in the obstacle avoidance logic *)
  let
    automaton 
      (* State: Turn right to avoid the obstacle *)
      state AvoidanceTurnRight
      do
        v_l = 40; (* Set left wheel velocity *)
        v_r = 40; (* Set right wheel velocity *)
        dir = 3;  (* Set direction to right *)
        avoidance_state_timer = 18 -> pre(avoidance_state_timer) - 1; (* Decrement the timer *)
      until (avoidance_state_timer <= 0) then AvoidanceForward (* Transition to forward movement after turning *)

      (* State: Move forward after initial turn *)
      state AvoidanceForward
      do
        v_l = 40; (* Set left wheel velocity *)
        v_r = 40; (* Set right wheel velocity *)
        dir = 1;  (* Set direction to forward *)
        avoidance_state_timer = 50 -> pre(avoidance_state_timer) - 1; (* Decrement the timer *)
      until (avoidance_state_timer <= 0) then AvoidanceTurnLeft (* Transition to turning left *)

      (* State: Turn left to navigate around the obstacle *)
      state AvoidanceTurnLeft
      do
        v_l = 40; (* Set left wheel velocity *)
        v_r = 40; (* Set right wheel velocity *)
        dir = 2;  (* Set direction to left *)
        avoidance_state_timer = 18 -> pre(avoidance_state_timer) - 1; (* Decrement the timer *)
      until (avoidance_state_timer <= 0) then AvoidanceForwardAgain (* Transition to forward movement again *)

      (* State: Move forward again after turning left *)
      state AvoidanceForwardAgain
      do
        v_l = 40; (* Set left wheel velocity *)
        v_r = 40; (* Set right wheel velocity *)
        dir = 1;  (* Set direction to forward *)
        avoidance_state_timer = 100 -> pre(avoidance_state_timer) - 1; (* Decrement the timer *)
      until (avoidance_state_timer <= 0) then AvoidanceTurnLeftAgain (* Transition to another left turn *)

      (* State: Turn left again for further obstacle clearance *)
      state AvoidanceTurnLeftAgain
      do
        v_l = 40; (* Set left wheel velocity *)
        v_r = 40; (* Set right wheel velocity *)
        dir = 2;  (* Set direction to left *)
        avoidance_state_timer = 18 -> pre(avoidance_state_timer) - 1; (* Decrement the timer *)
      until (avoidance_state_timer <= 0) then AvoidanceForwardFinal (* Transition to final forward movement *)

      (* State: Final forward movement, checking for obstacle clearance *)
      state AvoidanceForwardFinal
      do
        avoidance_state_timer = 30 -> pre(avoidance_state_timer) - 1; (* Decrement the timer *)
        v_l = 40; (* Set left wheel velocity *)
        v_r = 40; (* Set right wheel velocity *)
        dir = 1;  (* Set direction to forward *)
      until (center_sensor_input < 700 and avoidance_state_timer <= 0) then AvoidanceTurnRightFinal (* Transition to final right turn if obstacle is still detected *)

      (* State: Final right turn to complete obstacle avoidance *)
      state AvoidanceTurnRightFinal
      do
        v_l = 40; (* Set left wheel velocity *)
        v_r = 40; (* Set right wheel velocity *)
        dir = 3;  (* Set direction to right *)
        avoidance_state_timer = 20 -> pre(avoidance_state_timer) - 1; (* Decrement the timer *)
      until (avoidance_state_timer <= 0) then AvoidanceComplete (* Transition to completion state *)

      (* State: Obstacle avoidance complete, stop the robot *)
      state AvoidanceComplete
      do
        v_l = 0; (* Stop left wheel *)
        v_r = 0; (* Stop right wheel *)
        dir = 0;  (* Indicate completion *)
      end
  tel

(* PID control node for line following *)
node pid(sensor_input_0, sensor_input_1, sensor_input_2, sensor_input_3, sensor_input_4: int) returns (v_l, v_r: int)
  var pid_error, integral, proportional, derivative, pid_temp, pid_output: int; (* Variables for PID calculation *)
  let
    pid_error = sensor_input_1 - sensor_input_3; (* Calculate the error *)
    proportional = pid_error; (* Proportional term *)
    integral = 0 -> (pre(integral) + pid_error); (* Integral term *)
    derivative = pid_error - (0 -> pre(pid_error)); (* Derivative term *)
    pid_temp = (proportional / proportional_gain) + (integral / integral_gain) + (derivative / derivative_gain); (* PID calculation *)
    pid_output = if (pid_temp < 0) then -10 else 10; (* Determine output direction *)
    v_l = if (pid_output = 0) then 70 else (38 - pid_output); (* Adjust left wheel velocity *)
    v_r = if (pid_output = 0) then 70 else (38 + pid_output); (* Adjust right wheel velocity *)
  tel

(* Main node to control the robot's behavior *)
node main(main_sensor_0, main_sensor_1, main_sensor_2, main_sensor_3, main_sensor_4, forward_left_ir, forward_right_ir, left_top_ir, right_top_ir: int) returns (v_l, v_r, dir: int)
  var sensor_data: int^5; last right_empty: int = 0; last left_empty: int = 0; (* Array for sensor data and variables for parking spot detection *)
  let
    automaton
      (* State: Following a white line *)
      state WhiteLine
        do
          sensor_data = [1023 - main_sensor_0, 1023 - main_sensor_1, 1023 - main_sensor_2, 1023 - main_sensor_3, 1023 - main_sensor_4]; (* Invert sensor readings for white line *)
          automaton
            (* State: Moving forward, no line deviation *)
            state Forward
              do
                dir = 1;  (* Set direction to forward *)
                v_l = 55; v_r = 55; (* Set wheel velocities for forward movement *)
              unless (sensor_data[1] < 500 or sensor_data[3] < 500) then CorrectByPID (* Transition to PID correction if line is detected *)
              | (sensor_data[0] < 500) then LeftTurnState (* Transition to left turn if sensor 0 detects the line *)
              | (sensor_data[4] < 500) then RightTurnState (* Transition to right turn if sensor 4 detects the line *)

            (* State: Correcting the course using PID control *)
            state CorrectByPID
              do
                dir = 1;
                (v_l, v_r) = pid(sensor_data[0], sensor_data[1], sensor_data[2], sensor_data[3], sensor_data[4]); (* Call PID control node *)
              unless (sensor_data[0] < 500) then LeftTurnState (* Transition to left turn if sensor 0 detects the line *)
              | (sensor_data[4] < 500) then RightTurnState (* Transition to right turn if sensor 4 detects the line *)

            (* State: Turning left to follow the line *)
            state LeftTurnState
              do
                dir = 2;  (* Indicate left turn *)
                v_l = turn_speed_left; v_r = turn_speed_left; (* Set wheel velocities for left turn *)
              unless (sensor_data[1] < 500 or sensor_data[3] < 500) then CorrectByPID (* Transition to PID correction if line is detected *)
              | sensor_data[4] < 500 then RightTurnState (* Transition to right turn if sensor 4 detects the line *)

            (* State: Turning right to follow the line *)
            state RightTurnState
              do
                dir = 3;  (* Indicate right turn *)
                v_l = turn_speed_right; v_r = turn_speed_right; (* Set wheel velocities for right turn *)
              unless (sensor_data[1] < 500 or sensor_data[3] < 500) then CorrectByPID (* Transition to PID correction if line is detected *)
              | sensor_data[0] < 500 then LeftTurnState (* Transition to left turn if sensor 0 detects the line *)

          end
        unless (main_sensor_0 > 600 and main_sensor_1 > 600 and main_sensor_2 < 600 and main_sensor_3 > 600  and main_sensor_4 > 600) or (main_sensor_0 > 600 and main_sensor_1 < 600 and main_sensor_2 > 600 and main_sensor_3 > 600  and main_sensor_4 > 600)
        or (main_sensor_0 > 600 and main_sensor_1 > 600 and main_sensor_2 > 600 and main_sensor_3 < 600  and main_sensor_4 > 600) then BlackLine (* Transition to black line following if specific sensor pattern is detected *)

      (* State: Following a black line *)
      state BlackLine
        do
          sensor_data = [main_sensor_0, main_sensor_1, main_sensor_2, main_sensor_3, main_sensor_4]; (* Use raw sensor readings for black line *)
          automaton
            (* State: Moving forward on black line *)
            state ForwardOnBlack
              do
                dir = 1;  (* Indicate forward movement *)
                v_l = 55; v_r = 55; (* Set wheel velocities for forward movement *)
              unless (sensor_data[1] < 650 or sensor_data[3] < 500) then CorrectByPID (* Transition to PID correction if line is detected *)
              | (sensor_data[0] < 500) then LeftTurnState (* Transition to left turn if sensor 0 detects the line *)
              | (sensor_data[4] < 500) then RightTurnState (* Transition to right turn if sensor 4 detects the line *)
              | (forward_left_ir = 1 or forward_right_ir = 1) then Obstacle (* Transition to obstacle avoidance if IR sensors detect an obstacle *)
              | (left_top_ir = 0 or right_top_ir = 0) then CheckParkingSpots (* Transition to parking spot check if top sensors detect a spot *)

            (* State: Correcting course on black line using PID *)
            state CorrectByPID
              do
                dir = 1;  (* Indicate PID correction *)
                (v_l, v_r) = pid(sensor_data[0], sensor_data[1], sensor_data[2], sensor_data[3], sensor_data[4]); (* Call PID control node *)
              unless (sensor_data[0] < 500) then LeftTurnState (* Transition to left turn if sensor 0 detects the line *)
              | (sensor_data[4] < 500) then RightTurnState (* Transition to right turn if sensor 4 detects the line *)
              | (forward_left_ir = 1 or forward_right_ir = 1) then Obstacle (* Transition to obstacle avoidance if IR sensors detect an obstacle *)
              | (left_top_ir = 0 or right_top_ir = 0) then CheckParkingSpots

            state LeftTurnState
              do
                dir = 2;  (* Indicate left turn *)
                v_l = turn_speed_left; v_r = turn_speed_left; (* Set wheel velocities for left turn *)
              unless (sensor_data[1] < 650 or sensor_data[3] < 500) then CorrectByPID
              | sensor_data[4] < 500 then RightTurnState
              | (forward_left_ir = 1 or forward_right_ir = 1) then Obstacle
              | (left_top_ir = 0 or right_top_ir = 0) then CheckParkingSpots

            state RightTurnState
              do
                dir = 3;  (* Indicate right turn *)
                v_l = turn_speed_right; v_r = turn_speed_right; (* Set wheel velocities for right turn *)
              unless (sensor_data[1] < 650 or sensor_data[3] < 600) then CorrectByPID
              | sensor_data[0] < 500 then LeftTurnState
              | (forward_left_ir = 1 or forward_right_ir = 1) then Obstacle
              | (left_top_ir = 0 or right_top_ir = 0) then CheckParkingSpots

            state Obstacle
              do
                (* Call the reactive obstacle avoidance routine *)
                (v_l, v_r, dir) = obstacle_avoid(forward_left_ir, forward_right_ir, sensor_data[2]);
              until (dir = 0) then ForwardOnBlack

            state CheckParkingSpots
            var timer_parking_check: int;
            do
                timer_parking_check = 50 -> pre(timer_parking_check) - 1;
                right_empty = if (right_top_ir = 1 and timer_parking_check = 1) then  last right_empty + 1 else if (right_top_ir = 0 and timer_parking_check = 1) then 0 else last right_empty;
                left_empty = if (left_top_ir = 1 and timer_parking_check = 1) then last left_empty + 1 else if (left_top_ir = 0 and timer_parking_check = 1) then 0 else  last left_empty;
                v_l = 0;
                v_r = 0;
                dir = 1;
            until (right_empty = 2) then MoveStraightForRight
            |(left_empty = 2) then MoveStraightForLeft
            |(left_empty < 2 and right_empty < 2 and timer_parking_check = 0) then ForwardBlack

            state ForwardBlack
            var timer_forward: int;
            do
                timer_forward = 30 -> pre(timer_forward) - 1;
                dir = 1;
                (v_l, v_r) = pid(sensor_data[0], sensor_data[1], sensor_data[2], sensor_data[3], sensor_data[4]);
            until timer_forward = 0 then CheckParkingSpots

            state ParkOnRight
            var timer_park_right: int;
            do
                timer_park_right = 25 -> pre(timer_park_right) - 1;
                v_l = 40;
                v_r = 80;
                dir = 4;
            until timer_park_right = 0 then MoveBack

            state ParkOnLeft
            var timer_park_left: int;
            do
                timer_park_left = 25 -> pre(timer_park_left) - 1;
                v_l = 80;
                v_r = 40;
                dir = 4;
            until timer_park_left = 0 then MoveBack

            state MoveStraightForLeft
            var timer_move_straight: int;
            do
                timer_move_straight = 30 -> pre(timer_move_straight) - 1;
                v_l = 60;
                v_r = 60;
                dir = 1;
            until timer_move_straight = 0 then ParkOnLeft

            state MoveStraightForRight
            var timer_move_straight: int;
            do
                timer_move_straight = 30 -> pre(timer_move_straight) - 1;
                v_l = 60;
                v_r = 60;
                dir = 1;
            until timer_move_straight = 0 then ParkOnRight

            state MoveBack
            var timer_move_back: int;
            do
              timer_move_back=25->pre(timer_move_back)-1;
              v_l=30;
              v_r=30;
              dir=4;
            until timer_move_back<=0 then SuccessfullyParked

            state SuccessfullyParked
            do
                v_l = 0;
                v_r = 0;
                dir = 1;
              end
        end
  tel
